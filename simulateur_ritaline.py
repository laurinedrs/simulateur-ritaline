import streamlit as st
import numpy as np
import matplotlib.pyplot as plt

st.set_page_config(page_title="Simulateur Ritaline LP", layout="centered")
st.title("üß† Simulateur de concentration Ritaline LP")

st.markdown("""
Ce simulateur te permet d'estimer la concentration de Ritaline LP dans ton corps en fonction de tes prises (jusqu'√† 3 par jour).
- Le mod√®le utilise une estimation : **50% lib√©ration imm√©diate**, **50% lib√©ration prolong√©e**.
- Les heures sont √† entrer sous forme d√©cimale (ex : 8.5 pour 8h30).
""")

# Entr√©es utilisateur
st.header("üïí Saisie des prises")
col1, col2 = st.columns(2)
with col1:
    h1 = st.number_input("Heure prise 1", min_value=6.0, max_value=26.0, value=8.0, step=0.25)
    h2 = st.number_input("Heure prise 2", min_value=6.0, max_value=26.0, value=13.0, step=0.25)
    h3 = st.number_input("Heure prise 3", min_value=6.0, max_value=26.0, value=17.5, step=0.25)
with col2:
    d1 = st.number_input("Dose prise 1 (mg)", value=30)
    d2 = st.number_input("Dose prise 2 (mg)", value=20)
    d3 = st.number_input("Dose prise 3 (mg)", value=10)

# Fonction r√©aliste de lib√©ration imm√©diate + prolong√©e avec d√©croissance plus rapide

def simulate_lp(dose, t0, hours):
    t = hours - t0
    t[t < 0] = 0

    # Imm√©diate : pic rapide, chute vers 3h
    immediate = (dose * 0.5) * (t / 0.5) * np.exp(-t / 1.2)

    # Prolong√©e : pic vers 4h, effet sur 6‚Äì8h
    extended = (dose * 0.5) * ((t / 3)**2) * np.exp(-t / 3.5)

    return immediate + extended

# Heures de la journ√©e de 6h √† 2h (26.0 en d√©cimal)
hours = np.arange(6.0, 26.25, 0.25)

# Concentration totale
total = simulate_lp(d1, h1, hours) + simulate_lp(d2, h2, hours) + simulate_lp(d3, h3, hours)

# Affichage graphique
st.header("üìà Courbe de concentration estim√©e")
fig, ax = plt.subplots()
ax.plot(hours, total, label="Concentration estim√©e (mg)", color="steelblue")
ax.set_xlabel("Heure de la journ√©e")
ax.set_ylabel("mg dans le corps")
ax.set_title("Concentration de Ritaline LP dans le corps")
ax.grid(True)
ax.set_xlim(6, 26)
ax.set_xticks(np.arange(6, 27, 1))
ax.set_xticklabels([f"{int(h%24)}h" for h in np.arange(6, 27, 1)])
ax.set_ylim(0, max(total) + 5)
ax.legend()
st.pyplot(fig)

# R√©sum√©
st.header("üìä R√©sum√©")
st.write(f"**Concentration max estim√©e :** {np.max(total):.1f} mg vers {hours[np.argmax(total)]%24:.2f}h")
st.write(f"**Concentration √† 20h :** {total[np.where(hours == 20.0)][0]:.1f} mg")
